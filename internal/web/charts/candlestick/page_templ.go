// Code generated by templ - DO NOT EDIT.

package candlestick

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/JamesTiberiusKirk/fishstox/internal/models"
	"net/http"
)

// pageProps contains data to render on the page
type pageProps struct {
	tickerQuery string
	candles     []models.Candle
}

// templ page renders the page template
func page(r *http.Request, props pageProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div style=\"width:1000px\"><canvas id=\"chart\"></canvas></div><script>\n\n    // var barCount = 60;\n    // var initialDateStr = new Date().toUTCString();\n\n\n    function initFinChart(canvasId, barData){\n\t// var barData = new Array(barCount);\n\tvar lineData = new Array(barData.lenght);\n\t// getRandomData(initialDateStr);\n\n\n\t// bar data\n\t// {\n\t//  x: date.valueOf(),\n\t//  o: open,\n\t//  h: high,\n\t//  l: low,\n\t//  c: close\n\t// }\n\n\tconsole.log(barData)\n\n\t// Convert raw timestamps (in milliseconds) to DateTime objects\n\tconst timestamps = barData.map(bd => {\n\t    const validTimestamp = Number(bd.x);\n\t    if (isNaN(validTimestamp)) {\n\t\tconsole.error(\"Invalid timestamp:\", bd.x);\n\t\treturn null;\n\t    }\n\t    const dt = luxon.DateTime.fromMillis(validTimestamp);\n\t    return dt.isValid ? dt.toMillis() : null;\n\t}).filter(ts => ts !== null);\n\n\tvar chart = new Chart(document.getElementById(canvasId), {\n\t    type: 'candlestick',\n\t    data: {\n\t\tdatasets: [{\n\t\t    label: 'CHRT - Chart.js Corporation',\n\t\t    data: barData,\n\t\t}, {\n\t\t\tlabel: 'Close price',\n\t\t\ttype: 'line',\n\t\t\tdata: timestamps,\n\t\t\thidden: true,\n\t\t    }]\n\t    },\n\t    options: {\n\t\tresponsive: true,\n\t\tscales: {\n\t\t    x: {\n\t\t\ttype: 'time',\n\t\t\ttime: {\n\t\t\t    unit: 'minute',\n\t\t\t    tooltipFormat: 'll HH:mm',\n\t\t\t    displayFormats: {\n\t\t\t\tminute: 'dd/MM HH:mm',\n\t\t\t\thour: 'dd/MM HH:mm',\n\t\t\t\tday: 'dd/MM',\n\t\t\t    }\n\t\t\t},\n\t\t\tticks: {\n\t\t\t    source: 'data',\n\t\t\t    callback: function(value, index, values) {\n\t\t\t\treturn value\n\t\t\t    }\n\t\t\t},\n\t\t    },\n\t\t    y: {\n\t\t\tbeginAtZero: false,\n\t\t    },\n\t\t},\n\t\tplugins: {\n\t\t    tooltip: {\n\t\t\tcallbacks: {\n\t\t\t    label: function(tooltipItem) {\n\t\t\t\tconst date = luxon.DateTime.fromMillis(tooltipItem.raw.x);\n\t\t\t\treturn date.isValid ? `${date.toFormat('dd/MM HH:mm')}: â‚£${tooltipItem.raw.y}` : '';\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t});\n    }\n\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSFuncCall("initFinChart", "chart", props.candles).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate

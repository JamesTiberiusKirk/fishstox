// Code generated by templ - DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/JamesTiberiusKirk/fishstox/internal/models"
import "github.com/JamesTiberiusKirk/fishstox/internal/util"

var candleGraphHandle = templ.NewOnceHandle()

type CandleGraphProps struct {
	ID          string
	Prices      []models.StockPrice
	TickerQuery string
}

func CandleGraph(props CandleGraphProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div style=\"width: 100%; height: 400px;\"><canvas id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(props.ID + "_candle-chart")
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/components/candlegraph.templ`, Line: 16, Col: 38}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" style=\"width: 100%; height: 100%;\"></canvas></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<script>\n                function initChart(canvasID, chartDataString, ticker) {\n                    const chartData = JSON.parse(chartDataString);\n\n                    // Ensure timestamps and values are properly aligned\n                    if (chartData.timestamps.length !== chartData.values.length) {\n                        console.error(\"Mismatched timestamps and values arrays\");\n                        return;\n                    }\n\n                    // Convert raw timestamps (in milliseconds) to DateTime objects\n                    const timestamps = chartData.timestamps.map(timestamp => {\n                        const validTimestamp = Number(timestamp);\n                        if (isNaN(validTimestamp)) {\n                            console.error(\"Invalid timestamp:\", timestamp);\n                            return null;\n                        }\n                        const dt = luxon.DateTime.fromMillis(validTimestamp);\n                        return dt.isValid ? dt.toMillis() : null;\n                    }).filter(ts => ts !== null);\n\n                    new Chart(document.getElementById(canvasID), {\n                        type: 'line',\n                        data: {\n                            labels: timestamps,  // Use the converted timestamps\n                            datasets: [{\n                                label: ticker,\n                                data: chartData.values,  // Ensure this is correctly aligned with timestamps\n                                borderColor: 'rgba(75, 192, 192, 1)',\n                                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                                fill: true,\n                            }],\n                        },\n                        options: {\n                            responsive: true,\n                            scales: {\n                                x: {\n                                    type: 'time',\n                                    time: {\n                                        unit: 'minute',\n                                        tooltipFormat: 'll HH:mm',\n                                        displayFormats: {\n                                            minute: 'dd/MM HH:mm',\n                                            hour: 'dd/MM HH:mm',\n                                            day: 'dd/MM',\n                                        }\n                                    },\n                                    ticks: {\n                                        source: 'data',\n                                        callback: function(value, index, values) {\n                                            return value\n                                        }\n                                    },\n                                },\n                                y: {\n                                    beginAtZero: false,\n                                },\n                            },\n                            plugins: {\n                                tooltip: {\n                                    callbacks: {\n                                        label: function(tooltipItem) {\n                                            const date = luxon.DateTime.fromMillis(tooltipItem.raw.x);\n                                            return date.isValid ? `${date.toFormat('dd/MM HH:mm')}: â‚£${tooltipItem.raw.y}` : '';\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n                </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = candleGraphHandle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSFuncCall("initChart", props.ID+"_candle-chart", util.GenerateChartData(props.Prices), props.TickerQuery).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
